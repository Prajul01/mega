<?php
namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Auth;
use Exception;
use Laravel\Socialite\Facades\Socialite;
use App\Models\JobSeekerPersonalInformation;

class GoogleController extends Controller
{
    public function signInwithGoogle()
    {   
        session()->forget('redirection');
        if(url()->previous() != route('index') . '/'){
            session()->put('redirection', base64_encode(url()->previous()));
        }
        return Socialite::driver('google')->redirect();
    }

    public function callbackToGoogle()
    {
        try {

        $user = Socialite::driver('google')->user();

        $finduser = User::where('email', $user->email)->first();

        if (@$finduser) {

            $this->storeImage($user->user['picture'], $user->username);
            Auth::login($finduser);
            if(is_null(session()->get('redirection'))){
                return to_route('user.dashboard', $finduser->username)->with('success', 'Login was successfull');
            }
            $url = session()->get('redirection');
            session()->forget('redirection');
            return redirect(base64_decode($url))->with('status', 'Login was successfull');

        } else {
            $newUser = User::create([
                'name' => ucwords($user->name),
                'email' => $user->email,
                'gauth_id' => $user->id,
                'gauth_type' => 'google',
                'password' => encrypt('jobseeker@123'),
            ]);

            $newUser->username = $newUser->generateUsername($user->user['given_name']);
            $newUser->assignRole('3');
            $newUser->update();
            $info = new JobSeekerPersonalInformation;
            $info->user_id = $newUser->id;
            $info->first_name = ucfirst($user->user['given_name']);
            $info->last_name = ucfirst($user->user['family_name']);
            $info->profile_pic = $newUser->username . '.png';
            $this->storeImage($user->user['picture'], $newUser->username);
            $info->save();

            Auth::login($newUser);

            if (env('APP_ENV') == 'local') {
                if (url()->previous() == route('index') . '/') {
                    return to_route('user.dashboard', auth()->user()->username)->with('status', 'Logged In Successfully');
                } else {
                    return back()->with('status', 'Logged In Successfully');
                }

            } else {
                if (request()->root() == env('APP_URL')) {
                    if (url()->previous() == env('APP_URL') . '/') {
                        return to_route('user.dashboard', auth()->user()->username)->with('status', 'Logged In Successfully');
                    } else {
                        return back()->with('status', 'Logged In Successfully');
                    }
                } else {
                    auth()->logout();
                    return redirect()->back()->with('error', 'These credentials do not match our records.');
                }
            }
            return to_route('index')->with('status', 'Sign up successfully');
        }

        } catch (Exception $e) {

            return to_route('index')->with('error', 'Something went wrong.' . $e->getMessage());
        }
    }

    private function storeImage($imageUrl, $filename)
    {
        $imageContent = file_get_contents($imageUrl);

        if ($imageContent !== false) {
            // Define a local path where you want to save the image (e.g., storage/app/public)
            $localImagePath = storage_path("app/public/job-seeker/" . $filename . ".png");

            // Save the image content to the local path
            file_put_contents($localImagePath, $imageContent);

            // Now, you can use $localImagePath to access the saved image in your Laravel project
            // For example, you can display it in a view or use it in a PDF generated by Dompdf
        } else {
            // Handle the case where fetching the image failed
            echo "Failed to fetch the image from the remote URL.";
        }
    }
}